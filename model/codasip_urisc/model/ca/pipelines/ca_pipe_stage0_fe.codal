/**
 * Codasip s.r.o.
 * 
 * CONFIDENTIAL 
 *
 * Copyright 2019 Codasip s.r.o.
 * 
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of 
 * Codasip s.r.o. and its suppliers, if any. 
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to 
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the 
 * technical concepts may be patent pending.  
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this 
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained 
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                          Codasip uRISC CA - fetch stage events
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "ca_config.hcodal"

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

event fe : pipeline(pipe.FE)
{
    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Instruction fetch request
        // -----------------------------------------------------------------------------------------

        if (s_fe_ready)
        {
            if_fetch.transport(CP_PHS_ADDRESS, CP_AHB_NONSEQ, CP_AHB_READ, r_pc, CP_AHB_SIZE_32);

            #pragma simulator
            {
                printf_fe_request(r_pc);
            }
        }

        s_fe_stall = s_id_stall;

        // -----------------------------------------------------------------------------------------
        // Program Counter update
        // -----------------------------------------------------------------------------------------

        r_id_pc = (!s_id_stall) ? r_pc : r_id_pc;

        r_pc = (s_ex_jump_en) ? s_ex_alu & BUS_MASK :
               (s_id_stall)   ? r_pc :
                                r_pc + INSTR_SIZE;

        if (s_ex_jump_en) dprintf("FE: Jumping to 0x%x\n", s_ex_alu & BUS_MASK);

        // -----------------------------------------------------------------------------------------
        // Pipeline control
        // -----------------------------------------------------------------------------------------

        // Both ID and EX stage are cleared after jump in order to maintain correct program flow.
        s_id_clear = s_ex_jump_en || r_id_clear;
        s_ex_clear = s_ex_jump_en;
        s_wb_clear = s_ex_stall;

        r_id_clear = (s_ex_jump_en) ? true :
                     (s_id_stall  ) ? r_id_clear :
                                      false;
    };
};
