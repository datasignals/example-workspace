/**
 * Codasip s.r.o.
 * 
 * CONFIDENTIAL 
 *
 * Copyright 2019 Codasip s.r.o.
 * 
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of 
 * Codasip s.r.o. and its suppliers, if any. 
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to 
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the 
 * technical concepts may be patent pending.  
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this 
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained 
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                         Codasip uRISC CA - pipeline control
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "ca_config.hcodal"

// -------------------------------------------------------------------------------------------------
// Pipeline Control
// -------------------------------------------------------------------------------------------------

event pipeline_control : pipeline(pipe.FE)
{
    semantics
    {
        // -----------------------------------------------------------------------------------------
        if (s_fe_stall)
        {
            pipe.FE.stall();
            dprintf("FE: stage stall\n");
        }
        // -----------------------------------------------------------------------------------------
        if (s_id_stall)
        {
            pipe.ID.stall();
            dprintf("ID: stage stall\n");
        }
        else if (s_id_clear)
        {
            pipe.ID.clear();
            dprintf("ID: stage clear\n");
        }
        // -----------------------------------------------------------------------------------------
        if (s_ex_stall)
        {
            pipe.EX.stall();
            dprintf("EX: stage stall\n");
        }
        else if (s_ex_clear)
        {
            pipe.EX.clear();
            dprintf("EX: stage clear\n");
        }
        // -----------------------------------------------------------------------------------------
        if (s_wb_stall)
        {
            pipe.WB.stall();
            dprintf("WB: stage stall\n");
        }
        else if (s_wb_clear)
        {
            pipe.WB.clear();
            dprintf("WB: stage clear\n");
        }

        #pragma simulator
        {
            // Prints instructions in pipeline
            print_pipeline();
        }
    };
};
