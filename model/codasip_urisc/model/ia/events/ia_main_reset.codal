/**
 * Codasip s.r.o.
 * 
 * CONFIDENTIAL 
 *
 * Copyright 2019 Codasip s.r.o.
 * 
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of 
 * Codasip s.r.o. and its suppliers, if any. 
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to 
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the 
 * technical concepts may be patent pending.  
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this 
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained 
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                          Codasip uRISC IA - main and reset events
 *
 * -------------------------------------------------------------------------------------------------
 */

#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Event main, which starts execution of the next instruction, is activated every clock cycle.

event main
{
    // The directive 'use' defines instances of other events and elements.
    use isa;

    // Local instruction register
    register bit[INSTR_W] r_instruction_buffer;

    semantics
    {
        // Read an instruction from memory
        r_instruction_buffer = if_fetch[r_pc];

        // Print fetched instruction
        dprintf("\n%d:\t%08x | ", codasip_get_clock_cycle(), r_pc);
        codasip_disassembler(DEBUG_LEVEL, r_instruction_buffer, r_pc, "default", 34);
        dprintf("| ");

        // Increment the program counter
        r_pc += INSTR_SIZE;

        // The isa is a set of instructions and its argument is a register
        // or memory cell that contains the instruction to be executed.
        isa(r_instruction_buffer);
    };
};

// -------------------------------------------------------------------------------------------------
// The reset event is a special operation that is used to set the initial processor state.
// This event is activated at the beginning of a simulation.

event reset
{
    semantics
    {
        dprintf("Cycle     PMA    |      Instruction                  | src reg 1 re"
            "ad         src reg2 read/load     dst reg write/store\n_________________|__"
            "_________________________________|____________________________________________________"
            "_____________________________");
    };
};
