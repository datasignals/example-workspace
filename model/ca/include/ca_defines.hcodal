/**
 * Codasip s.r.o.
 * 
 * CONFIDENTIAL 
 *
 * Copyright 2019 Codasip s.r.o.
 * 
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of 
 * Codasip s.r.o. and its suppliers, if any. 
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to 
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the 
 * technical concepts may be patent pending.  
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this 
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained 
 * in Codasip license agreement under which you obtained this file.
 */

/* -------------------------------------------------------------------------------------------------
 *
 *                         Codasip uRISC CA - signal value definitions
 *
 * -------------------------------------------------------------------------------------------------
 */

#ifndef CA_DEFINES_HCODAL
#define CA_DEFINES_HCODAL

// -------------------------------------------------------------------------------------------------
// Signal size
// -------------------------------------------------------------------------------------------------

#define PIPE_MUX_W      bitsizeof(enum pipe_mux)
#define WRITE_OP_W      bitsizeof(enum write_enable)
#define MEM_OP_W        bitsizeof(enum mem_op)
#define ALU_OP_W        bitsizeof(enum alu_op)
#define JUMP_OP_W       bitsizeof(enum jump_op)
#define SRC_A_MUX_W     bitsizeof(enum src_a_mux)
#define SRC_B_MUX_W     bitsizeof(enum src_b_mux)
#define ADDR_W_MUX_W    bitsizeof(enum addr_w_mux)

// -------------------------------------------------------------------------------------------------
// ID stage
// -------------------------------------------------------------------------------------------------

// ALU input A
enum src_a_mux
{
    SRC_A_GPR,
    SRC_A_PC,
};

// ALU input B
enum src_b_mux
{
    SRC_B_GPR,
    SRC_B_UIMM24,
    SRC_B_SIMM14,
    SRC_B_SIMM19,
};

enum addr_w_mux
{
    MUX_ADDR_W,
    MUX_ADDR_A,
    MUX_ADDR_B,
    MUX_ADDR_RA,
};

// -------------------------------------------------------------------------------------------------
// EX stage
// -------------------------------------------------------------------------------------------------

// Memory operation codes
enum mem_op
{
    MEM_NOP,
    MEM_STB,
    MEM_STH,
    MEM_ST,
    MEM_LDBU,
    MEM_LDBS,
    MEM_LDHU,
    MEM_LDHS,
    MEM_LD,
};

// ALU operation codes
enum alu_op
{
    ALU_NOP,
    ALU_MOV,
    ALU_ADD,
    ALU_SUB,
    ALU_MUL,
    ALU_AND,
    ALU_OR,
    ALU_XOR,
    ALU_SLL,
    ALU_SRL,
    ALU_SRA,
    ALU_MOVHI,
    ALU_EQ,
    ALU_NEQ,
    ALU_SLT,
    ALU_ULT,
    ALU_SLE,
    ALU_ULE,
};

// Jump condition codes
enum jump_op
{
    JUMP_FALSE,
    JUMP_TRUE,
    JUMP_FALSE_COND,
    JUMP_TRUE_COND,
};

// Write condition codes
enum write_enable
{
    WE_FALSE,
    WE_TRUE,
    WE_FALSE_COND,
    WE_TRUE_COND,
};

// -------------------------------------------------------------------------------------------------
// WB stage
// -------------------------------------------------------------------------------------------------

// Result select
enum pipe_mux
{
    ALU_PIPELINE,
    LOAD_PIPELINE,
    PC_PIPELINE,
};

// -------------------------------------------------------------------------------------------------
// Auxiliary definitions
// -------------------------------------------------------------------------------------------------

#define DONT_CARE           0
#define NOP_INSTRUCTION     0u

#endif    // CA_DEFINES_HCODAL

